{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      },
      "DependsOn": []
    },
    "InventoryInsertLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/company-test-two-dev-inventoryInsert"
      },
      "DependsOn": []
    },
    "SubtractInventoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/company-test-two-dev-subtractInventory"
      },
      "DependsOn": []
    },
    "ResetInventoryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/company-test-two-dev-resetInventory"
      },
      "DependsOn": []
    },
    "InsertPreOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/company-test-two-dev-insertPreOrder"
      },
      "DependsOn": []
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "company-test-two",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/company-test-two-dev*:*",
                        {}
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/company-test-two-dev*:*:*",
                        {}
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "company-test-two",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      },
      "DependsOn": []
    },
    "InventoryInsertLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z/company-test-two.zip"
        },
        "Handler": "dist/src/handler/inventoryHandler.inventoryInsert",
        "Runtime": "nodejs12.x",
        "FunctionName": "company-test-two-dev-inventoryInsert",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InventoryInsertLogGroup"
      ]
    },
    "SubtractInventoryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z/company-test-two.zip"
        },
        "Handler": "dist/src/handler/inventoryHandler.subtractInventory",
        "Runtime": "nodejs12.x",
        "FunctionName": "company-test-two-dev-subtractInventory",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubtractInventoryLogGroup"
      ]
    },
    "ResetInventoryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z/company-test-two.zip"
        },
        "Handler": "dist/src/handler/inventoryHandler.resetInventory",
        "Runtime": "nodejs12.x",
        "FunctionName": "company-test-two-dev-resetInventory",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ResetInventoryLogGroup"
      ]
    },
    "InsertPreOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z/company-test-two.zip"
        },
        "Handler": "dist/src/handler/preOrderHandler.insertPreOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "company-test-two-dev-insertPreOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InsertPreOrderLogGroup"
      ]
    },
    "ApiGatewayMethodInventoryinsertOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceInventoryinsert"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodSubtractinventoryOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceSubtractinventory"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodResetinventoryOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceResetinventory"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodInsertpreorderOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceInsertpreorder"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        }
      },
      "DependsOn": [
        "APINestedStack"
      ]
    },
    "ApiGatewayMethodInventoryinsertPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceInventoryinsert"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InventoryInsertLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "APINestedStack",
        "PermissionsNestedStack"
      ]
    },
    "ApiGatewayMethodSubtractinventoryPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceSubtractinventory"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubtractInventoryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "APINestedStack",
        "PermissionsNestedStack"
      ]
    },
    "ApiGatewayMethodResetinventoryPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceResetinventory"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ResetInventoryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "APINestedStack",
        "PermissionsNestedStack"
      ]
    },
    "ApiGatewayMethodInsertpreorderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayResourceInsertpreorder"
          ]
        },
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InsertPreOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "APINestedStack",
        "PermissionsNestedStack"
      ]
    },
    "ApiGatewayDeployment1668431007666": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Fn::GetAtt": [
            "APINestedStack",
            "Outputs.ApiGatewayRestApi"
          ]
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodInventoryinsertOptions",
        "ApiGatewayMethodSubtractinventoryOptions",
        "ApiGatewayMethodResetinventoryOptions",
        "ApiGatewayMethodInsertpreorderOptions",
        "ApiGatewayMethodInventoryinsertPost",
        "ApiGatewayMethodSubtractinventoryPut",
        "ApiGatewayMethodResetinventoryPut",
        "ApiGatewayMethodInsertpreorderPost",
        "APINestedStack"
      ]
    },
    "PermissionsNestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ApiGatewayRestApiParameter": {
            "Fn::GetAtt": [
              "APINestedStack",
              "Outputs.ApiGatewayRestApi"
            ]
          },
          "InventoryInsertLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "InventoryInsertLambdaFunction",
              "Arn"
            ]
          },
          "SubtractInventoryLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "SubtractInventoryLambdaFunction",
              "Arn"
            ]
          },
          "ResetInventoryLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "ResetInventoryLambdaFunction",
              "Arn"
            ]
          },
          "InsertPreOrderLambdaFunctionArnParameter": {
            "Fn::GetAtt": [
              "InsertPreOrderLambdaFunction",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.us-east-1.amazonaws.com",
              {
                "Ref": "ServerlessDeploymentBucket"
              },
              "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z",
              "cloudformation-template-Permissions-nested-stack.json"
            ]
          ]
        }
      },
      "DependsOn": [
        "APINestedStack",
        "InventoryInsertLambdaFunction",
        "SubtractInventoryLambdaFunction",
        "ResetInventoryLambdaFunction",
        "InsertPreOrderLambdaFunction"
      ]
    },
    "APINestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {},
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.us-east-1.amazonaws.com",
              {
                "Ref": "ServerlessDeploymentBucket"
              },
              "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z",
              "cloudformation-template-API-nested-stack.json"
            ]
          ]
        }
      }
    },
    "PoliciesNestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "ServerlessDeploymentBucketParameter": {
            "Ref": "ServerlessDeploymentBucket"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.us-east-1.amazonaws.com",
              {
                "Ref": "ServerlessDeploymentBucket"
              },
              "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z",
              "cloudformation-template-Policies-nested-stack.json"
            ]
          ]
        }
      },
      "DependsOn": [
        "ServerlessDeploymentBucket"
      ]
    },
    "VersionsNestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "InventoryInsertLambdaFunctionParameter": {
            "Ref": "InventoryInsertLambdaFunction"
          },
          "SubtractInventoryLambdaFunctionParameter": {
            "Ref": "SubtractInventoryLambdaFunction"
          },
          "ResetInventoryLambdaFunctionParameter": {
            "Ref": "ResetInventoryLambdaFunction"
          },
          "InsertPreOrderLambdaFunctionParameter": {
            "Ref": "InsertPreOrderLambdaFunction"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              "https://s3.us-east-1.amazonaws.com",
              {
                "Ref": "ServerlessDeploymentBucket"
              },
              "serverless/company-test-two/dev/1668431023352-2022-11-14T13:03:43.352Z",
              "cloudformation-template-Versions-nested-stack.json"
            ]
          ]
        }
      },
      "DependsOn": [
        "InventoryInsertLambdaFunction",
        "SubtractInventoryLambdaFunction",
        "ResetInventoryLambdaFunction",
        "InsertPreOrderLambdaFunction"
      ]
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-company-test-two-dev-ServerlessDeploymentBucketName"
      }
    },
    "InventoryInsertLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.InventoryInsertLambdaVersionVARqNdQtG2JAsABjZXtIhUkmjZQjC7o1p0DLlmcb8"
        ]
      },
      "Export": {
        "Name": "sls-company-test-two-dev-InventoryInsertLambdaFunctionQualifiedArn"
      }
    },
    "SubtractInventoryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.SubtractInventoryLambdaVersionDTPM0IZtba9v1802yrZpIfanMJtEB915OEJZAEngQQA"
        ]
      },
      "Export": {
        "Name": "sls-company-test-two-dev-SubtractInventoryLambdaFunctionQualifiedArn"
      }
    },
    "ResetInventoryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.ResetInventoryLambdaVersionVRfyu4sJvRF60yqX8K418wP7GOpWgRHbAU4IvNHUWjQ"
        ]
      },
      "Export": {
        "Name": "sls-company-test-two-dev-ResetInventoryLambdaFunctionQualifiedArn"
      }
    },
    "InsertPreOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Fn::GetAtt": [
          "VersionsNestedStack",
          "Outputs.InsertPreOrderLambdaVersionFzHBQKiEb8RQwJxc3oVXHYyKNcpN7qUIsOy61vDFQ"
        ]
      },
      "Export": {
        "Name": "sls-company-test-two-dev-InsertPreOrderLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "APINestedStack",
                "Outputs.ApiGatewayRestApi"
              ]
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-company-test-two-dev-ServiceEndpoint"
      }
    }
  }
}